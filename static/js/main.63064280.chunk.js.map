{"version":3,"sources":["logo.svg","components/Wrapper/Wrapper.js","components/Navbar/Navbar.js","components/Title/Title.js","components/Footer/Footer.js","components/PunCard/PunCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Wrapper","props","react_default","a","createElement","className","children","refreshPage","window","location","reload","Navbar","type","onClick","class","aria-hidden","message","indexOf","style","color","currentScore","topScore","Title","Footer","href","PunCard","selectPun","punny","alt","src","image","App","state","puns","unselectedPuns","shuffleArray","array","i","length","j","Math","floor","random","_ref","undefined","_this","find","item","setState","newPuns","filter","_this2","this","components_Wrapper_Wrapper","components_Navbar_Navbar","components_Title_Title","map","pun","components_PunCard_PunCard","components_Footer_Footer","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63064280.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./Navbar.css\";\n\nconst Navbar = props => (\n    <div>\n        <ul className=\"nav nav-bar nav-justified\">\n            <li><button type=\"button\" onClick={ refreshPage }> <span><i class=\"fa fa-refresh\" aria-hidden=\"true\"></i> Reset</span> </button></li>\n            <li\n                className={props.message.indexOf('incorrectly') !== -1 ? \n                    \"desc-incorrect\" : \n                    props.message.indexOf('correctly') !== -1 ?\n                        \"desc-correct\" : \"desc-normal\"}>\n                {props.message}\n            </li>\n            <li>Score: <span style={{color:\"#fdd53e\"}}>{props.currentScore}</span> / 12</li> \n            <li>Top Score: {props.topScore}</li>\n        </ul>\n    </div>\n);\n\nfunction refreshPage(){ \n    window.location.reload(); \n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => (\n    <div className=\"titlebox\">\n        <h1>Be Punstoppable</h1>\n        <p>Click on a pun card to earn points, but don't click on any more than once</p>\n    </div>\n);\n\nexport default Title;\n","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = props => (\n    <footer class=\"footer-text\">\n        <div>\n            <span>&copy; 2019 Kathy Chen </span><a href=\"https://github.com/xmkchen\"> / github</a>\n        </div>\n    </footer>\n);\n\nexport default Footer;","import React from \"react\";\nimport \"./PunCard.css\";\n\nconst PunCard = props => (\n    <div className=\"card\">\n        <div className=\"img-container\">\n            <a onClick={() => props.selectPun(props.punny)}\n                className={props.currentScore === 0}>\n                <img alt={props.punny} src={props.image} />\n            </a>\n        </div>\n    </div>\n);\n\nexport default PunCard;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport puns from './puns.json'\nimport Wrapper from './components/Wrapper'\nimport Navbar from './components/Navbar'\nimport Title from './components/Title'\nimport Footer from './components/Footer'\nimport PunCard from './components/PunCard'\n\nclass App extends Component {\n  state = {\n    message: \"Click any pun card to begin!\",\n    topScore: 0,\n    currentScore: 0,\n    puns: puns,\n    unselectedPuns: puns\n  }\n\n  shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n  }\n\n  selectPun = punny => {\n    const findPun = this.state.unselectedPuns.find(item => item.punny === punny);\n\n    if (findPun === undefined) {\n      // failure to select a new pun\n      this.setState({\n        message: \"WRONG!\",\n        topScore: (this.state.currentScore > this.state.topScore) ? this.state.currentScore : this.state.topScore,\n        currentScore: 0,\n        puns: puns,\n        unselectedPuns: puns\n      });\n    }\n    else {\n      // success to select a new pun\n      const newPuns = this.state.unselectedPuns.filter(item => item.punny !== punny);\n\n      this.setState({\n        message: \"CORRECT!\",\n        currentScore: this.state.currentScore + 1,\n        puns: puns,\n        unselectedPuns: newPuns\n      });\n    }\n\n    this.shuffleArray(puns);\n  };\n\n  render() {\n    return (\n      <Wrapper>\n        <Navbar\n          message={this.state.message}\n          currentScore={this.state.currentScore}\n          topScore={this.state.topScore}\n        />\n        <Title />\n        {\n          this.state.puns.map(pun => (\n            <PunCard\n              punny={pun.punny}\n              image={pun.image}\n              selectPun={this.selectPun}\n              currentScore={this.state.currentScore}\n            />\n          ))\n        }\n        <Footer />\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}